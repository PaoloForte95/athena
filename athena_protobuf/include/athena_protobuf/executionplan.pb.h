// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: executionplan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_executionplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_executionplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_executionplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_executionplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_executionplan_2eproto;
namespace athena {
class ProtoAction;
class ProtoActionDefaultTypeInternal;
extern ProtoActionDefaultTypeInternal _ProtoAction_default_instance_;
class ProtoExecutionPlan;
class ProtoExecutionPlanDefaultTypeInternal;
extern ProtoExecutionPlanDefaultTypeInternal _ProtoExecutionPlan_default_instance_;
class ProtoMethod;
class ProtoMethodDefaultTypeInternal;
extern ProtoMethodDefaultTypeInternal _ProtoMethod_default_instance_;
class ProtoProblem;
class ProtoProblemDefaultTypeInternal;
extern ProtoProblemDefaultTypeInternal _ProtoProblem_default_instance_;
}  // namespace athena
PROTOBUF_NAMESPACE_OPEN
template<> ::athena::ProtoAction* Arena::CreateMaybeMessage<::athena::ProtoAction>(Arena*);
template<> ::athena::ProtoExecutionPlan* Arena::CreateMaybeMessage<::athena::ProtoExecutionPlan>(Arena*);
template<> ::athena::ProtoMethod* Arena::CreateMaybeMessage<::athena::ProtoMethod>(Arena*);
template<> ::athena::ProtoProblem* Arena::CreateMaybeMessage<::athena::ProtoProblem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace athena {

// ===================================================================

class ProtoProblem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.ProtoProblem) */ {
 public:
  inline ProtoProblem() : ProtoProblem(nullptr) {};
  virtual ~ProtoProblem();

  ProtoProblem(const ProtoProblem& from);
  ProtoProblem(ProtoProblem&& from) noexcept
    : ProtoProblem() {
    *this = ::std::move(from);
  }

  inline ProtoProblem& operator=(const ProtoProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoProblem& operator=(ProtoProblem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoProblem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoProblem* internal_default_instance() {
    return reinterpret_cast<const ProtoProblem*>(
               &_ProtoProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProtoProblem& a, ProtoProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoProblem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoProblem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoProblem* New() const final {
    return CreateMaybeMessage<ProtoProblem>(nullptr);
  }

  ProtoProblem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoProblem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoProblem& from);
  void MergeFrom(const ProtoProblem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoProblem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.ProtoProblem";
  }
  protected:
  explicit ProtoProblem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kProblemFieldNumber = 2,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domain(
      std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string problem = 2;
  void clear_problem();
  const std::string& problem() const;
  void set_problem(const std::string& value);
  void set_problem(std::string&& value);
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  std::string* mutable_problem();
  std::string* release_problem();
  void set_allocated_problem(std::string* problem);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_problem();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_problem(
      std::string* problem);
  private:
  const std::string& _internal_problem() const;
  void _internal_set_problem(const std::string& value);
  std::string* _internal_mutable_problem();
  public:

  // @@protoc_insertion_point(class_scope:athena.ProtoProblem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr problem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// -------------------------------------------------------------------

class ProtoAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.ProtoAction) */ {
 public:
  inline ProtoAction() : ProtoAction(nullptr) {};
  virtual ~ProtoAction();

  ProtoAction(const ProtoAction& from);
  ProtoAction(ProtoAction&& from) noexcept
    : ProtoAction() {
    *this = ::std::move(from);
  }

  inline ProtoAction& operator=(const ProtoAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoAction& operator=(ProtoAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoAction* internal_default_instance() {
    return reinterpret_cast<const ProtoAction*>(
               &_ProtoAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProtoAction& a, ProtoAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoAction* New() const final {
    return CreateMaybeMessage<ProtoAction>(nullptr);
  }

  ProtoAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoAction& from);
  void MergeFrom(const ProtoAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.ProtoAction";
  }
  protected:
  explicit ProtoAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 4,
    kParentsFieldNumber = 6,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kRobotIDFieldNumber = 3,
    kMaterialFieldNumber = 5,
  };
  // repeated string waypoints = 4;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  const std::string& waypoints(int index) const;
  std::string* mutable_waypoints(int index);
  void set_waypoints(int index, const std::string& value);
  void set_waypoints(int index, std::string&& value);
  void set_waypoints(int index, const char* value);
  void set_waypoints(int index, const char* value, size_t size);
  std::string* add_waypoints();
  void add_waypoints(const std::string& value);
  void add_waypoints(std::string&& value);
  void add_waypoints(const char* value);
  void add_waypoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& waypoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_waypoints();
  private:
  const std::string& _internal_waypoints(int index) const;
  std::string* _internal_add_waypoints();
  public:

  // repeated int32 parents = 6;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_parents() const;
  void _internal_add_parents(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_parents();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 parents(int index) const;
  void set_parents(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_parents(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      parents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_parents();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 robotID = 3;
  void clear_robotid();
  ::PROTOBUF_NAMESPACE_ID::int32 robotid() const;
  void set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robotid() const;
  void _internal_set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 material = 5;
  void clear_material();
  ::PROTOBUF_NAMESPACE_ID::int32 material() const;
  void set_material(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_material() const;
  void _internal_set_material(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:athena.ProtoAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> waypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > parents_;
  mutable std::atomic<int> _parents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 robotid_;
  ::PROTOBUF_NAMESPACE_ID::int32 material_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// -------------------------------------------------------------------

class ProtoMethod PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.ProtoMethod) */ {
 public:
  inline ProtoMethod() : ProtoMethod(nullptr) {};
  virtual ~ProtoMethod();

  ProtoMethod(const ProtoMethod& from);
  ProtoMethod(ProtoMethod&& from) noexcept
    : ProtoMethod() {
    *this = ::std::move(from);
  }

  inline ProtoMethod& operator=(const ProtoMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoMethod& operator=(ProtoMethod&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoMethod& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoMethod* internal_default_instance() {
    return reinterpret_cast<const ProtoMethod*>(
               &_ProtoMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProtoMethod& a, ProtoMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoMethod* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoMethod* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoMethod* New() const final {
    return CreateMaybeMessage<ProtoMethod>(nullptr);
  }

  ProtoMethod* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoMethod>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoMethod& from);
  void MergeFrom(const ProtoMethod& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoMethod* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.ProtoMethod";
  }
  protected:
  explicit ProtoMethod(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsIdsFieldNumber = 3,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // repeated int32 actions_ids = 3;
  int actions_ids_size() const;
  private:
  int _internal_actions_ids_size() const;
  public:
  void clear_actions_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actions_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_actions_ids() const;
  void _internal_add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_actions_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 actions_ids(int index) const;
  void set_actions_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      actions_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_actions_ids();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:athena.ProtoMethod)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > actions_ids_;
  mutable std::atomic<int> _actions_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// -------------------------------------------------------------------

class ProtoExecutionPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:athena.ProtoExecutionPlan) */ {
 public:
  inline ProtoExecutionPlan() : ProtoExecutionPlan(nullptr) {};
  virtual ~ProtoExecutionPlan();

  ProtoExecutionPlan(const ProtoExecutionPlan& from);
  ProtoExecutionPlan(ProtoExecutionPlan&& from) noexcept
    : ProtoExecutionPlan() {
    *this = ::std::move(from);
  }

  inline ProtoExecutionPlan& operator=(const ProtoExecutionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtoExecutionPlan& operator=(ProtoExecutionPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProtoExecutionPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProtoExecutionPlan* internal_default_instance() {
    return reinterpret_cast<const ProtoExecutionPlan*>(
               &_ProtoExecutionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProtoExecutionPlan& a, ProtoExecutionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtoExecutionPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtoExecutionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProtoExecutionPlan* New() const final {
    return CreateMaybeMessage<ProtoExecutionPlan>(nullptr);
  }

  ProtoExecutionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProtoExecutionPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProtoExecutionPlan& from);
  void MergeFrom(const ProtoExecutionPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtoExecutionPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "athena.ProtoExecutionPlan";
  }
  protected:
  explicit ProtoExecutionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // repeated .athena.ProtoAction action = 1;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  ::athena::ProtoAction* mutable_action(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoAction >*
      mutable_action();
  private:
  const ::athena::ProtoAction& _internal_action(int index) const;
  ::athena::ProtoAction* _internal_add_action();
  public:
  const ::athena::ProtoAction& action(int index) const;
  ::athena::ProtoAction* add_action();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoAction >&
      action() const;

  // repeated .athena.ProtoMethod method = 2;
  int method_size() const;
  private:
  int _internal_method_size() const;
  public:
  void clear_method();
  ::athena::ProtoMethod* mutable_method(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoMethod >*
      mutable_method();
  private:
  const ::athena::ProtoMethod& _internal_method(int index) const;
  ::athena::ProtoMethod* _internal_add_method();
  public:
  const ::athena::ProtoMethod& method(int index) const;
  ::athena::ProtoMethod* add_method();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoMethod >&
      method() const;

  // @@protoc_insertion_point(class_scope:athena.ProtoExecutionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoAction > action_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoMethod > method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProtoProblem

// string domain = 1;
inline void ProtoProblem::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoProblem::domain() const {
  // @@protoc_insertion_point(field_get:athena.ProtoProblem.domain)
  return _internal_domain();
}
inline void ProtoProblem::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:athena.ProtoProblem.domain)
}
inline std::string* ProtoProblem::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:athena.ProtoProblem.domain)
  return _internal_mutable_domain();
}
inline const std::string& ProtoProblem::_internal_domain() const {
  return domain_.Get();
}
inline void ProtoProblem::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoProblem::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.ProtoProblem.domain)
}
inline void ProtoProblem::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:athena.ProtoProblem.domain)
}
inline void ProtoProblem::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.ProtoProblem.domain)
}
inline std::string* ProtoProblem::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoProblem::release_domain() {
  // @@protoc_insertion_point(field_release:athena.ProtoProblem.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoProblem::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.ProtoProblem.domain)
}
inline std::string* ProtoProblem::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:athena.ProtoProblem.domain)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return domain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoProblem::unsafe_arena_set_allocated_domain(
    std::string* domain) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domain, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.ProtoProblem.domain)
}

// string problem = 2;
inline void ProtoProblem::clear_problem() {
  problem_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoProblem::problem() const {
  // @@protoc_insertion_point(field_get:athena.ProtoProblem.problem)
  return _internal_problem();
}
inline void ProtoProblem::set_problem(const std::string& value) {
  _internal_set_problem(value);
  // @@protoc_insertion_point(field_set:athena.ProtoProblem.problem)
}
inline std::string* ProtoProblem::mutable_problem() {
  // @@protoc_insertion_point(field_mutable:athena.ProtoProblem.problem)
  return _internal_mutable_problem();
}
inline const std::string& ProtoProblem::_internal_problem() const {
  return problem_.Get();
}
inline void ProtoProblem::_internal_set_problem(const std::string& value) {
  
  problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoProblem::set_problem(std::string&& value) {
  
  problem_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.ProtoProblem.problem)
}
inline void ProtoProblem::set_problem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:athena.ProtoProblem.problem)
}
inline void ProtoProblem::set_problem(const char* value,
    size_t size) {
  
  problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.ProtoProblem.problem)
}
inline std::string* ProtoProblem::_internal_mutable_problem() {
  
  return problem_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoProblem::release_problem() {
  // @@protoc_insertion_point(field_release:athena.ProtoProblem.problem)
  return problem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoProblem::set_allocated_problem(std::string* problem) {
  if (problem != nullptr) {
    
  } else {
    
  }
  problem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), problem,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.ProtoProblem.problem)
}
inline std::string* ProtoProblem::unsafe_arena_release_problem() {
  // @@protoc_insertion_point(field_unsafe_arena_release:athena.ProtoProblem.problem)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return problem_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoProblem::unsafe_arena_set_allocated_problem(
    std::string* problem) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (problem != nullptr) {
    
  } else {
    
  }
  problem_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      problem, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.ProtoProblem.problem)
}

// -------------------------------------------------------------------

// ProtoAction

// string name = 1;
inline void ProtoAction::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoAction::name() const {
  // @@protoc_insertion_point(field_get:athena.ProtoAction.name)
  return _internal_name();
}
inline void ProtoAction::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:athena.ProtoAction.name)
}
inline std::string* ProtoAction::mutable_name() {
  // @@protoc_insertion_point(field_mutable:athena.ProtoAction.name)
  return _internal_mutable_name();
}
inline const std::string& ProtoAction::_internal_name() const {
  return name_.Get();
}
inline void ProtoAction::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoAction::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.ProtoAction.name)
}
inline void ProtoAction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:athena.ProtoAction.name)
}
inline void ProtoAction::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.ProtoAction.name)
}
inline std::string* ProtoAction::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoAction::release_name() {
  // @@protoc_insertion_point(field_release:athena.ProtoAction.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoAction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.ProtoAction.name)
}
inline std::string* ProtoAction::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:athena.ProtoAction.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoAction::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.ProtoAction.name)
}

// int32 id = 2;
inline void ProtoAction::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::id() const {
  // @@protoc_insertion_point(field_get:athena.ProtoAction.id)
  return _internal_id();
}
inline void ProtoAction::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ProtoAction::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:athena.ProtoAction.id)
}

// int32 robotID = 3;
inline void ProtoAction::clear_robotid() {
  robotid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::_internal_robotid() const {
  return robotid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::robotid() const {
  // @@protoc_insertion_point(field_get:athena.ProtoAction.robotID)
  return _internal_robotid();
}
inline void ProtoAction::_internal_set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robotid_ = value;
}
inline void ProtoAction::set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robotid(value);
  // @@protoc_insertion_point(field_set:athena.ProtoAction.robotID)
}

// repeated string waypoints = 4;
inline int ProtoAction::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int ProtoAction::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void ProtoAction::clear_waypoints() {
  waypoints_.Clear();
}
inline std::string* ProtoAction::add_waypoints() {
  // @@protoc_insertion_point(field_add_mutable:athena.ProtoAction.waypoints)
  return _internal_add_waypoints();
}
inline const std::string& ProtoAction::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline const std::string& ProtoAction::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:athena.ProtoAction.waypoints)
  return _internal_waypoints(index);
}
inline std::string* ProtoAction::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:athena.ProtoAction.waypoints)
  return waypoints_.Mutable(index);
}
inline void ProtoAction::set_waypoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:athena.ProtoAction.waypoints)
  waypoints_.Mutable(index)->assign(value);
}
inline void ProtoAction::set_waypoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:athena.ProtoAction.waypoints)
  waypoints_.Mutable(index)->assign(std::move(value));
}
inline void ProtoAction::set_waypoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  waypoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:athena.ProtoAction.waypoints)
}
inline void ProtoAction::set_waypoints(int index, const char* value, size_t size) {
  waypoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:athena.ProtoAction.waypoints)
}
inline std::string* ProtoAction::_internal_add_waypoints() {
  return waypoints_.Add();
}
inline void ProtoAction::add_waypoints(const std::string& value) {
  waypoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:athena.ProtoAction.waypoints)
}
inline void ProtoAction::add_waypoints(std::string&& value) {
  waypoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:athena.ProtoAction.waypoints)
}
inline void ProtoAction::add_waypoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  waypoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:athena.ProtoAction.waypoints)
}
inline void ProtoAction::add_waypoints(const char* value, size_t size) {
  waypoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:athena.ProtoAction.waypoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProtoAction::waypoints() const {
  // @@protoc_insertion_point(field_list:athena.ProtoAction.waypoints)
  return waypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProtoAction::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:athena.ProtoAction.waypoints)
  return &waypoints_;
}

// int32 material = 5;
inline void ProtoAction::clear_material() {
  material_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::_internal_material() const {
  return material_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::material() const {
  // @@protoc_insertion_point(field_get:athena.ProtoAction.material)
  return _internal_material();
}
inline void ProtoAction::_internal_set_material(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  material_ = value;
}
inline void ProtoAction::set_material(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:athena.ProtoAction.material)
}

// repeated int32 parents = 6;
inline int ProtoAction::_internal_parents_size() const {
  return parents_.size();
}
inline int ProtoAction::parents_size() const {
  return _internal_parents_size();
}
inline void ProtoAction::clear_parents() {
  parents_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoAction::parents(int index) const {
  // @@protoc_insertion_point(field_get:athena.ProtoAction.parents)
  return _internal_parents(index);
}
inline void ProtoAction::set_parents(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  parents_.Set(index, value);
  // @@protoc_insertion_point(field_set:athena.ProtoAction.parents)
}
inline void ProtoAction::_internal_add_parents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  parents_.Add(value);
}
inline void ProtoAction::add_parents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_parents(value);
  // @@protoc_insertion_point(field_add:athena.ProtoAction.parents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProtoAction::_internal_parents() const {
  return parents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProtoAction::parents() const {
  // @@protoc_insertion_point(field_list:athena.ProtoAction.parents)
  return _internal_parents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProtoAction::_internal_mutable_parents() {
  return &parents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProtoAction::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:athena.ProtoAction.parents)
  return _internal_mutable_parents();
}

// -------------------------------------------------------------------

// ProtoMethod

// string name = 1;
inline void ProtoMethod::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ProtoMethod::name() const {
  // @@protoc_insertion_point(field_get:athena.ProtoMethod.name)
  return _internal_name();
}
inline void ProtoMethod::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:athena.ProtoMethod.name)
}
inline std::string* ProtoMethod::mutable_name() {
  // @@protoc_insertion_point(field_mutable:athena.ProtoMethod.name)
  return _internal_mutable_name();
}
inline const std::string& ProtoMethod::_internal_name() const {
  return name_.Get();
}
inline void ProtoMethod::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProtoMethod::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:athena.ProtoMethod.name)
}
inline void ProtoMethod::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:athena.ProtoMethod.name)
}
inline void ProtoMethod::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:athena.ProtoMethod.name)
}
inline std::string* ProtoMethod::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProtoMethod::release_name() {
  // @@protoc_insertion_point(field_release:athena.ProtoMethod.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProtoMethod::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:athena.ProtoMethod.name)
}
inline std::string* ProtoMethod::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:athena.ProtoMethod.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProtoMethod::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:athena.ProtoMethod.name)
}

// int32 id = 2;
inline void ProtoMethod::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoMethod::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoMethod::id() const {
  // @@protoc_insertion_point(field_get:athena.ProtoMethod.id)
  return _internal_id();
}
inline void ProtoMethod::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ProtoMethod::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:athena.ProtoMethod.id)
}

// repeated int32 actions_ids = 3;
inline int ProtoMethod::_internal_actions_ids_size() const {
  return actions_ids_.size();
}
inline int ProtoMethod::actions_ids_size() const {
  return _internal_actions_ids_size();
}
inline void ProtoMethod::clear_actions_ids() {
  actions_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoMethod::_internal_actions_ids(int index) const {
  return actions_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProtoMethod::actions_ids(int index) const {
  // @@protoc_insertion_point(field_get:athena.ProtoMethod.actions_ids)
  return _internal_actions_ids(index);
}
inline void ProtoMethod::set_actions_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  actions_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:athena.ProtoMethod.actions_ids)
}
inline void ProtoMethod::_internal_add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  actions_ids_.Add(value);
}
inline void ProtoMethod::add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_actions_ids(value);
  // @@protoc_insertion_point(field_add:athena.ProtoMethod.actions_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProtoMethod::_internal_actions_ids() const {
  return actions_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ProtoMethod::actions_ids() const {
  // @@protoc_insertion_point(field_list:athena.ProtoMethod.actions_ids)
  return _internal_actions_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProtoMethod::_internal_mutable_actions_ids() {
  return &actions_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ProtoMethod::mutable_actions_ids() {
  // @@protoc_insertion_point(field_mutable_list:athena.ProtoMethod.actions_ids)
  return _internal_mutable_actions_ids();
}

// -------------------------------------------------------------------

// ProtoExecutionPlan

// repeated .athena.ProtoAction action = 1;
inline int ProtoExecutionPlan::_internal_action_size() const {
  return action_.size();
}
inline int ProtoExecutionPlan::action_size() const {
  return _internal_action_size();
}
inline void ProtoExecutionPlan::clear_action() {
  action_.Clear();
}
inline ::athena::ProtoAction* ProtoExecutionPlan::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:athena.ProtoExecutionPlan.action)
  return action_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoAction >*
ProtoExecutionPlan::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:athena.ProtoExecutionPlan.action)
  return &action_;
}
inline const ::athena::ProtoAction& ProtoExecutionPlan::_internal_action(int index) const {
  return action_.Get(index);
}
inline const ::athena::ProtoAction& ProtoExecutionPlan::action(int index) const {
  // @@protoc_insertion_point(field_get:athena.ProtoExecutionPlan.action)
  return _internal_action(index);
}
inline ::athena::ProtoAction* ProtoExecutionPlan::_internal_add_action() {
  return action_.Add();
}
inline ::athena::ProtoAction* ProtoExecutionPlan::add_action() {
  // @@protoc_insertion_point(field_add:athena.ProtoExecutionPlan.action)
  return _internal_add_action();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoAction >&
ProtoExecutionPlan::action() const {
  // @@protoc_insertion_point(field_list:athena.ProtoExecutionPlan.action)
  return action_;
}

// repeated .athena.ProtoMethod method = 2;
inline int ProtoExecutionPlan::_internal_method_size() const {
  return method_.size();
}
inline int ProtoExecutionPlan::method_size() const {
  return _internal_method_size();
}
inline void ProtoExecutionPlan::clear_method() {
  method_.Clear();
}
inline ::athena::ProtoMethod* ProtoExecutionPlan::mutable_method(int index) {
  // @@protoc_insertion_point(field_mutable:athena.ProtoExecutionPlan.method)
  return method_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoMethod >*
ProtoExecutionPlan::mutable_method() {
  // @@protoc_insertion_point(field_mutable_list:athena.ProtoExecutionPlan.method)
  return &method_;
}
inline const ::athena::ProtoMethod& ProtoExecutionPlan::_internal_method(int index) const {
  return method_.Get(index);
}
inline const ::athena::ProtoMethod& ProtoExecutionPlan::method(int index) const {
  // @@protoc_insertion_point(field_get:athena.ProtoExecutionPlan.method)
  return _internal_method(index);
}
inline ::athena::ProtoMethod* ProtoExecutionPlan::_internal_add_method() {
  return method_.Add();
}
inline ::athena::ProtoMethod* ProtoExecutionPlan::add_method() {
  // @@protoc_insertion_point(field_add:athena.ProtoExecutionPlan.method)
  return _internal_add_method();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::athena::ProtoMethod >&
ProtoExecutionPlan::method() const {
  // @@protoc_insertion_point(field_list:athena.ProtoExecutionPlan.method)
  return method_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace athena

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_executionplan_2eproto
