// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: executionplan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_executionplan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_executionplan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_executionplan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_executionplan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_executionplan_2eproto;
namespace planning2 {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ExecutionPlan;
class ExecutionPlanDefaultTypeInternal;
extern ExecutionPlanDefaultTypeInternal _ExecutionPlan_default_instance_;
class Method;
class MethodDefaultTypeInternal;
extern MethodDefaultTypeInternal _Method_default_instance_;
class Problem;
class ProblemDefaultTypeInternal;
extern ProblemDefaultTypeInternal _Problem_default_instance_;
}  // namespace planning2
PROTOBUF_NAMESPACE_OPEN
template<> ::planning2::Action* Arena::CreateMaybeMessage<::planning2::Action>(Arena*);
template<> ::planning2::ExecutionPlan* Arena::CreateMaybeMessage<::planning2::ExecutionPlan>(Arena*);
template<> ::planning2::Method* Arena::CreateMaybeMessage<::planning2::Method>(Arena*);
template<> ::planning2::Problem* Arena::CreateMaybeMessage<::planning2::Problem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace planning2 {

// ===================================================================

class Problem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning2.Problem) */ {
 public:
  inline Problem() : Problem(nullptr) {};
  virtual ~Problem();

  Problem(const Problem& from);
  Problem(Problem&& from) noexcept
    : Problem() {
    *this = ::std::move(from);
  }

  inline Problem& operator=(const Problem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Problem& operator=(Problem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Problem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Problem* internal_default_instance() {
    return reinterpret_cast<const Problem*>(
               &_Problem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Problem& a, Problem& b) {
    a.Swap(&b);
  }
  inline void Swap(Problem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Problem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Problem* New() const final {
    return CreateMaybeMessage<Problem>(nullptr);
  }

  Problem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Problem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Problem& from);
  void MergeFrom(const Problem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Problem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning2.Problem";
  }
  protected:
  explicit Problem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kProblemFieldNumber = 2,
  };
  // string domain = 1;
  void clear_domain();
  const std::string& domain() const;
  void set_domain(const std::string& value);
  void set_domain(std::string&& value);
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  std::string* mutable_domain();
  std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_domain();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_domain(
      std::string* domain);
  private:
  const std::string& _internal_domain() const;
  void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // string problem = 2;
  void clear_problem();
  const std::string& problem() const;
  void set_problem(const std::string& value);
  void set_problem(std::string&& value);
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  std::string* mutable_problem();
  std::string* release_problem();
  void set_allocated_problem(std::string* problem);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_problem();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_problem(
      std::string* problem);
  private:
  const std::string& _internal_problem() const;
  void _internal_set_problem(const std::string& value);
  std::string* _internal_mutable_problem();
  public:

  // @@protoc_insertion_point(class_scope:planning2.Problem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr problem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// -------------------------------------------------------------------

class Action PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning2.Action) */ {
 public:
  inline Action() : Action(nullptr) {};
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Action* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning2.Action";
  }
  protected:
  explicit Action(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 4,
    kParentsFieldNumber = 6,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kRobotIDFieldNumber = 3,
    kMaterialFieldNumber = 5,
  };
  // repeated string waypoints = 4;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  const std::string& waypoints(int index) const;
  std::string* mutable_waypoints(int index);
  void set_waypoints(int index, const std::string& value);
  void set_waypoints(int index, std::string&& value);
  void set_waypoints(int index, const char* value);
  void set_waypoints(int index, const char* value, size_t size);
  std::string* add_waypoints();
  void add_waypoints(const std::string& value);
  void add_waypoints(std::string&& value);
  void add_waypoints(const char* value);
  void add_waypoints(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& waypoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_waypoints();
  private:
  const std::string& _internal_waypoints(int index) const;
  std::string* _internal_add_waypoints();
  public:

  // repeated int32 parents = 6;
  int parents_size() const;
  private:
  int _internal_parents_size() const;
  public:
  void clear_parents();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parents(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_parents() const;
  void _internal_add_parents(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_parents();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 parents(int index) const;
  void set_parents(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_parents(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      parents() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_parents();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 robotID = 3;
  void clear_robotid();
  ::PROTOBUF_NAMESPACE_ID::int32 robotid() const;
  void set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robotid() const;
  void _internal_set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 material = 5;
  void clear_material();
  ::PROTOBUF_NAMESPACE_ID::int32 material() const;
  void set_material(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_material() const;
  void _internal_set_material(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:planning2.Action)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> waypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > parents_;
  mutable std::atomic<int> _parents_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 robotid_;
  ::PROTOBUF_NAMESPACE_ID::int32 material_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// -------------------------------------------------------------------

class Method PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning2.Method) */ {
 public:
  inline Method() : Method(nullptr) {};
  virtual ~Method();

  Method(const Method& from);
  Method(Method&& from) noexcept
    : Method() {
    *this = ::std::move(from);
  }

  inline Method& operator=(const Method& from) {
    CopyFrom(from);
    return *this;
  }
  inline Method& operator=(Method&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Method& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Method* internal_default_instance() {
    return reinterpret_cast<const Method*>(
               &_Method_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Method& a, Method& b) {
    a.Swap(&b);
  }
  inline void Swap(Method* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Method* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Method* New() const final {
    return CreateMaybeMessage<Method>(nullptr);
  }

  Method* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Method>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Method& from);
  void MergeFrom(const Method& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Method* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning2.Method";
  }
  protected:
  explicit Method(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsIdsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated int32 actions_ids = 2;
  int actions_ids_size() const;
  private:
  int _internal_actions_ids_size() const;
  public:
  void clear_actions_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_actions_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_actions_ids() const;
  void _internal_add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_actions_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 actions_ids(int index) const;
  void set_actions_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      actions_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_actions_ids();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:planning2.Method)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > actions_ids_;
  mutable std::atomic<int> _actions_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// -------------------------------------------------------------------

class ExecutionPlan PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:planning2.ExecutionPlan) */ {
 public:
  inline ExecutionPlan() : ExecutionPlan(nullptr) {};
  virtual ~ExecutionPlan();

  ExecutionPlan(const ExecutionPlan& from);
  ExecutionPlan(ExecutionPlan&& from) noexcept
    : ExecutionPlan() {
    *this = ::std::move(from);
  }

  inline ExecutionPlan& operator=(const ExecutionPlan& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecutionPlan& operator=(ExecutionPlan&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecutionPlan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecutionPlan* internal_default_instance() {
    return reinterpret_cast<const ExecutionPlan*>(
               &_ExecutionPlan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ExecutionPlan& a, ExecutionPlan& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecutionPlan* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecutionPlan* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecutionPlan* New() const final {
    return CreateMaybeMessage<ExecutionPlan>(nullptr);
  }

  ExecutionPlan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecutionPlan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecutionPlan& from);
  void MergeFrom(const ExecutionPlan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecutionPlan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "planning2.ExecutionPlan";
  }
  protected:
  explicit ExecutionPlan(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_executionplan_2eproto);
    return ::descriptor_table_executionplan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // repeated .planning2.Action action = 1;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  ::planning2::Action* mutable_action(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Action >*
      mutable_action();
  private:
  const ::planning2::Action& _internal_action(int index) const;
  ::planning2::Action* _internal_add_action();
  public:
  const ::planning2::Action& action(int index) const;
  ::planning2::Action* add_action();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Action >&
      action() const;

  // repeated .planning2.Method method = 2;
  int method_size() const;
  private:
  int _internal_method_size() const;
  public:
  void clear_method();
  ::planning2::Method* mutable_method(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Method >*
      mutable_method();
  private:
  const ::planning2::Method& _internal_method(int index) const;
  ::planning2::Method* _internal_add_method();
  public:
  const ::planning2::Method& method(int index) const;
  ::planning2::Method* add_method();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Method >&
      method() const;

  // @@protoc_insertion_point(class_scope:planning2.ExecutionPlan)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Action > action_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Method > method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_executionplan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Problem

// string domain = 1;
inline void Problem::clear_domain() {
  domain_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Problem::domain() const {
  // @@protoc_insertion_point(field_get:planning2.Problem.domain)
  return _internal_domain();
}
inline void Problem::set_domain(const std::string& value) {
  _internal_set_domain(value);
  // @@protoc_insertion_point(field_set:planning2.Problem.domain)
}
inline std::string* Problem::mutable_domain() {
  // @@protoc_insertion_point(field_mutable:planning2.Problem.domain)
  return _internal_mutable_domain();
}
inline const std::string& Problem::_internal_domain() const {
  return domain_.Get();
}
inline void Problem::_internal_set_domain(const std::string& value) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Problem::set_domain(std::string&& value) {
  
  domain_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:planning2.Problem.domain)
}
inline void Problem::set_domain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:planning2.Problem.domain)
}
inline void Problem::set_domain(const char* value,
    size_t size) {
  
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:planning2.Problem.domain)
}
inline std::string* Problem::_internal_mutable_domain() {
  
  return domain_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Problem::release_domain() {
  // @@protoc_insertion_point(field_release:planning2.Problem.domain)
  return domain_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Problem::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), domain,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:planning2.Problem.domain)
}
inline std::string* Problem::unsafe_arena_release_domain() {
  // @@protoc_insertion_point(field_unsafe_arena_release:planning2.Problem.domain)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return domain_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Problem::unsafe_arena_set_allocated_domain(
    std::string* domain) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (domain != nullptr) {
    
  } else {
    
  }
  domain_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      domain, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:planning2.Problem.domain)
}

// string problem = 2;
inline void Problem::clear_problem() {
  problem_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Problem::problem() const {
  // @@protoc_insertion_point(field_get:planning2.Problem.problem)
  return _internal_problem();
}
inline void Problem::set_problem(const std::string& value) {
  _internal_set_problem(value);
  // @@protoc_insertion_point(field_set:planning2.Problem.problem)
}
inline std::string* Problem::mutable_problem() {
  // @@protoc_insertion_point(field_mutable:planning2.Problem.problem)
  return _internal_mutable_problem();
}
inline const std::string& Problem::_internal_problem() const {
  return problem_.Get();
}
inline void Problem::_internal_set_problem(const std::string& value) {
  
  problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Problem::set_problem(std::string&& value) {
  
  problem_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:planning2.Problem.problem)
}
inline void Problem::set_problem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:planning2.Problem.problem)
}
inline void Problem::set_problem(const char* value,
    size_t size) {
  
  problem_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:planning2.Problem.problem)
}
inline std::string* Problem::_internal_mutable_problem() {
  
  return problem_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Problem::release_problem() {
  // @@protoc_insertion_point(field_release:planning2.Problem.problem)
  return problem_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Problem::set_allocated_problem(std::string* problem) {
  if (problem != nullptr) {
    
  } else {
    
  }
  problem_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), problem,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:planning2.Problem.problem)
}
inline std::string* Problem::unsafe_arena_release_problem() {
  // @@protoc_insertion_point(field_unsafe_arena_release:planning2.Problem.problem)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return problem_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Problem::unsafe_arena_set_allocated_problem(
    std::string* problem) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (problem != nullptr) {
    
  } else {
    
  }
  problem_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      problem, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:planning2.Problem.problem)
}

// -------------------------------------------------------------------

// Action

// string name = 1;
inline void Action::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Action::name() const {
  // @@protoc_insertion_point(field_get:planning2.Action.name)
  return _internal_name();
}
inline void Action::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:planning2.Action.name)
}
inline std::string* Action::mutable_name() {
  // @@protoc_insertion_point(field_mutable:planning2.Action.name)
  return _internal_mutable_name();
}
inline const std::string& Action::_internal_name() const {
  return name_.Get();
}
inline void Action::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Action::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:planning2.Action.name)
}
inline void Action::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:planning2.Action.name)
}
inline void Action::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:planning2.Action.name)
}
inline std::string* Action::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Action::release_name() {
  // @@protoc_insertion_point(field_release:planning2.Action.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Action::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:planning2.Action.name)
}
inline std::string* Action::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:planning2.Action.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Action::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:planning2.Action.name)
}

// int32 id = 2;
inline void Action::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::id() const {
  // @@protoc_insertion_point(field_get:planning2.Action.id)
  return _internal_id();
}
inline void Action::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Action::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:planning2.Action.id)
}

// int32 robotID = 3;
inline void Action::clear_robotid() {
  robotid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::_internal_robotid() const {
  return robotid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::robotid() const {
  // @@protoc_insertion_point(field_get:planning2.Action.robotID)
  return _internal_robotid();
}
inline void Action::_internal_set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robotid_ = value;
}
inline void Action::set_robotid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robotid(value);
  // @@protoc_insertion_point(field_set:planning2.Action.robotID)
}

// repeated string waypoints = 4;
inline int Action::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int Action::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void Action::clear_waypoints() {
  waypoints_.Clear();
}
inline std::string* Action::add_waypoints() {
  // @@protoc_insertion_point(field_add_mutable:planning2.Action.waypoints)
  return _internal_add_waypoints();
}
inline const std::string& Action::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline const std::string& Action::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:planning2.Action.waypoints)
  return _internal_waypoints(index);
}
inline std::string* Action::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:planning2.Action.waypoints)
  return waypoints_.Mutable(index);
}
inline void Action::set_waypoints(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:planning2.Action.waypoints)
  waypoints_.Mutable(index)->assign(value);
}
inline void Action::set_waypoints(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:planning2.Action.waypoints)
  waypoints_.Mutable(index)->assign(std::move(value));
}
inline void Action::set_waypoints(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  waypoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:planning2.Action.waypoints)
}
inline void Action::set_waypoints(int index, const char* value, size_t size) {
  waypoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:planning2.Action.waypoints)
}
inline std::string* Action::_internal_add_waypoints() {
  return waypoints_.Add();
}
inline void Action::add_waypoints(const std::string& value) {
  waypoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:planning2.Action.waypoints)
}
inline void Action::add_waypoints(std::string&& value) {
  waypoints_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:planning2.Action.waypoints)
}
inline void Action::add_waypoints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  waypoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:planning2.Action.waypoints)
}
inline void Action::add_waypoints(const char* value, size_t size) {
  waypoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:planning2.Action.waypoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Action::waypoints() const {
  // @@protoc_insertion_point(field_list:planning2.Action.waypoints)
  return waypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Action::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:planning2.Action.waypoints)
  return &waypoints_;
}

// int32 material = 5;
inline void Action::clear_material() {
  material_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::_internal_material() const {
  return material_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::material() const {
  // @@protoc_insertion_point(field_get:planning2.Action.material)
  return _internal_material();
}
inline void Action::_internal_set_material(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  material_ = value;
}
inline void Action::set_material(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_material(value);
  // @@protoc_insertion_point(field_set:planning2.Action.material)
}

// repeated int32 parents = 6;
inline int Action::_internal_parents_size() const {
  return parents_.size();
}
inline int Action::parents_size() const {
  return _internal_parents_size();
}
inline void Action::clear_parents() {
  parents_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::_internal_parents(int index) const {
  return parents_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Action::parents(int index) const {
  // @@protoc_insertion_point(field_get:planning2.Action.parents)
  return _internal_parents(index);
}
inline void Action::set_parents(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  parents_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning2.Action.parents)
}
inline void Action::_internal_add_parents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  parents_.Add(value);
}
inline void Action::add_parents(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_parents(value);
  // @@protoc_insertion_point(field_add:planning2.Action.parents)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Action::_internal_parents() const {
  return parents_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Action::parents() const {
  // @@protoc_insertion_point(field_list:planning2.Action.parents)
  return _internal_parents();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Action::_internal_mutable_parents() {
  return &parents_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Action::mutable_parents() {
  // @@protoc_insertion_point(field_mutable_list:planning2.Action.parents)
  return _internal_mutable_parents();
}

// -------------------------------------------------------------------

// Method

// int32 id = 1;
inline void Method::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Method::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Method::id() const {
  // @@protoc_insertion_point(field_get:planning2.Method.id)
  return _internal_id();
}
inline void Method::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Method::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:planning2.Method.id)
}

// repeated int32 actions_ids = 2;
inline int Method::_internal_actions_ids_size() const {
  return actions_ids_.size();
}
inline int Method::actions_ids_size() const {
  return _internal_actions_ids_size();
}
inline void Method::clear_actions_ids() {
  actions_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Method::_internal_actions_ids(int index) const {
  return actions_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Method::actions_ids(int index) const {
  // @@protoc_insertion_point(field_get:planning2.Method.actions_ids)
  return _internal_actions_ids(index);
}
inline void Method::set_actions_ids(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  actions_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:planning2.Method.actions_ids)
}
inline void Method::_internal_add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  actions_ids_.Add(value);
}
inline void Method::add_actions_ids(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_actions_ids(value);
  // @@protoc_insertion_point(field_add:planning2.Method.actions_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Method::_internal_actions_ids() const {
  return actions_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Method::actions_ids() const {
  // @@protoc_insertion_point(field_list:planning2.Method.actions_ids)
  return _internal_actions_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Method::_internal_mutable_actions_ids() {
  return &actions_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Method::mutable_actions_ids() {
  // @@protoc_insertion_point(field_mutable_list:planning2.Method.actions_ids)
  return _internal_mutable_actions_ids();
}

// -------------------------------------------------------------------

// ExecutionPlan

// repeated .planning2.Action action = 1;
inline int ExecutionPlan::_internal_action_size() const {
  return action_.size();
}
inline int ExecutionPlan::action_size() const {
  return _internal_action_size();
}
inline void ExecutionPlan::clear_action() {
  action_.Clear();
}
inline ::planning2::Action* ExecutionPlan::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:planning2.ExecutionPlan.action)
  return action_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Action >*
ExecutionPlan::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:planning2.ExecutionPlan.action)
  return &action_;
}
inline const ::planning2::Action& ExecutionPlan::_internal_action(int index) const {
  return action_.Get(index);
}
inline const ::planning2::Action& ExecutionPlan::action(int index) const {
  // @@protoc_insertion_point(field_get:planning2.ExecutionPlan.action)
  return _internal_action(index);
}
inline ::planning2::Action* ExecutionPlan::_internal_add_action() {
  return action_.Add();
}
inline ::planning2::Action* ExecutionPlan::add_action() {
  // @@protoc_insertion_point(field_add:planning2.ExecutionPlan.action)
  return _internal_add_action();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Action >&
ExecutionPlan::action() const {
  // @@protoc_insertion_point(field_list:planning2.ExecutionPlan.action)
  return action_;
}

// repeated .planning2.Method method = 2;
inline int ExecutionPlan::_internal_method_size() const {
  return method_.size();
}
inline int ExecutionPlan::method_size() const {
  return _internal_method_size();
}
inline void ExecutionPlan::clear_method() {
  method_.Clear();
}
inline ::planning2::Method* ExecutionPlan::mutable_method(int index) {
  // @@protoc_insertion_point(field_mutable:planning2.ExecutionPlan.method)
  return method_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Method >*
ExecutionPlan::mutable_method() {
  // @@protoc_insertion_point(field_mutable_list:planning2.ExecutionPlan.method)
  return &method_;
}
inline const ::planning2::Method& ExecutionPlan::_internal_method(int index) const {
  return method_.Get(index);
}
inline const ::planning2::Method& ExecutionPlan::method(int index) const {
  // @@protoc_insertion_point(field_get:planning2.ExecutionPlan.method)
  return _internal_method(index);
}
inline ::planning2::Method* ExecutionPlan::_internal_add_method() {
  return method_.Add();
}
inline ::planning2::Method* ExecutionPlan::add_method() {
  // @@protoc_insertion_point(field_add:planning2.ExecutionPlan.method)
  return _internal_add_method();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::planning2::Method >&
ExecutionPlan::method() const {
  // @@protoc_insertion_point(field_list:planning2.ExecutionPlan.method)
  return method_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_executionplan_2eproto
